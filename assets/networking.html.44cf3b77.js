import{_ as s,r as i,o as r,c,a as e,d as n,b as o,f as t}from"./app.8b6d0242.js";const l={},d=e("h1",{id:"networking",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#networking","aria-hidden":"true"},"#"),n(" Networking")],-1),p=e("code",null,"this.context.connection",-1),u={href:"https://glitch.com/edit/#!/needle-tiny-server",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/jjxxs/websocket-ts",target:"_blank",rel:"noopener noreferrer"},k={href:"https://google.github.io/flatbuffers/",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>Source code for networking is at <code>engine/engine_networking.ts</code>.</p><h2 id="using-multiplayer" tabindex="-1"><a class="header-anchor" href="#using-multiplayer" aria-hidden="true">#</a> Using Multiplayer</h2><ul><li><p><strong>Enable Networking</strong><br> Add a <code>SyncedRoom</code> component.</p></li><li><p><strong>Enable Desktop Viewer Sync</strong><br> Add a <code>SyncedCamera</code> component.</p></li><li><p><strong>Enable XR Avatar Sync</strong><br> Add a <code>WebXRSync</code> component.</p></li><li><p><strong>Enable Voice Chat</strong><br> Add a <code>VoIP</code> component.</p></li></ul><blockquote><p><strong>Note</strong>: these components can be anywhere inside your <code>GltfObject</code> hierarchy. They can also all be on the same GameObject.</p></blockquote><h2 id="core-components" tabindex="-1"><a class="header-anchor" href="#core-components" aria-hidden="true">#</a> Core Components</h2><ul><li><code>SyncedRoom</code> \u2014 handles networking connection and connection to a room</li><li><code>SyncedTransform</code> \u2014 handles synchronizing transforms</li><li><code>SyncedCamera</code> \u2014 spawns a prefab for any user connected to the room which will follow their position</li><li><code>WebXRSync</code> \u2014 handles synchronization for AR and VR users</li><li><code>VoIP</code> \u2014 handles voice-over-IP audio connections, microphone access etc. between users</li><li><code>Networking</code> \u2014 use to customize server backend url</li></ul><h2 id="manual-networking" tabindex="-1"><a class="header-anchor" href="#manual-networking" aria-hidden="true">#</a> Manual Networking</h2><blockquote><p>\u{1F3D7}\uFE0F Under construction</p></blockquote><h3 id="sending" tabindex="-1"><a class="header-anchor" href="#sending" aria-hidden="true">#</a> Sending</h3><p>Send a json message to all users in the same room:<br><code>this.context.connection.send(key:string, data: IModel | object | boolean | string | number | null)</code></p><p>Send a flatbuffer binary array to all users in the same room:<br><code>this.context.connect.sendBinary(arr:Uint8Array)</code></p><h4 id="persistence" tabindex="-1"><a class="header-anchor" href="#persistence" aria-hidden="true">#</a> Persistence</h4><p>When sending an object containing a <code>guid</code> field it will saved in the persistant storage and automatically sent to users that connect later or come back later to the site (e.g. to restore state).<br> To delete state for a specific guid from the backend storage you can use <code>delete-state</code> as the key and provide an object with <code>{ guid: &quot;guid_to_delete&quot; } </code></p><h3 id="receiving" tabindex="-1"><a class="header-anchor" href="#receiving" aria-hidden="true">#</a> Receiving</h3><p>Subscribe to json events / listen to events in the room using a specific key<br><code>this.context.connection.beginListen(key:string, callback:(data) =&gt; void)</code><br> Unsubscribe with <code>stopListening</code></p><p>Subscribe to flatbuffer binary events<br><code>this.context.connection.beginListenBinrary(identifier:string, callback:(data : ByteBuffer) =&gt; void)</code><br> Unsubscribe with <code>stopListenBinary</code></p><h2 id="auto-networking-experimental" tabindex="-1"><a class="header-anchor" href="#auto-networking-experimental" aria-hidden="true">#</a> Auto Networking (experimental)</h2><p>To automatically network fields in a component you can just decorate a field with a <code>@syncField()</code> decorator (note: you need to have <code>experimentalDecorators: true</code> in your <code>tsconfig.json</code> file for it to work)</p><p>Example:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> syncField <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine/engine/engine_networking_auto&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AutoFieldSync</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token keyword">implements</span> <span class="token class-name">IPointerClickHandler</span> <span class="token punctuation">{</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">syncField</span></span><span class="token punctuation">(</span><span class="token string">&quot;myValueChanged&quot;</span><span class="token punctuation">)</span>
    mySyncedValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    
    <span class="token keyword">private</span> <span class="token function">myValueChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;My value changed&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mySyncedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">onPointerClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>mySyncedValue <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="flatbuffers-for-your-own-components" tabindex="-1"><a class="header-anchor" href="#flatbuffers-for-your-own-components" aria-hidden="true">#</a> Flatbuffers for your own components</h2>`,21),g={href:"https://google.github.io/flatbuffers/flatbuffers_guide_using_schema_compiler.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://google.github.io/flatbuffers/flatbuffers_guide_use_typescript.html",target:"_blank",rel:"noopener noreferrer"},y=t('<blockquote><p>\u{1F3D7}\uFE0F Under construction</p></blockquote><h2 id="built-in-networking-on-glitch" tabindex="-1"><a class="header-anchor" href="#built-in-networking-on-glitch" aria-hidden="true">#</a> Built-in Networking on Glitch</h2><p>When deploying your app to Glitch, we include a simple networking backend that is great for prototyping and small deployments (~12-20 people at the same time). You can later update to a bigger/better/stronger networking solution if required.</p><h3 id="limitations" tabindex="-1"><a class="header-anchor" href="#limitations" aria-hidden="true">#</a> Limitations</h3><ul><li>approx. 12-20 people maximum \u2013 afterwards the tiny Glitch server instance becomes slow</li></ul><h3 id="how-to-upgrade-to-a-stronger-server" tabindex="-1"><a class="header-anchor" href="#how-to-upgrade-to-a-stronger-server" aria-hidden="true">#</a> How to upgrade to a stronger server</h3><blockquote><p>\u{1F3D7}\uFE0F Under construction.</p></blockquote><h3 id="how-to-use-your-own-networking-implementation" tabindex="-1"><a class="header-anchor" href="#how-to-use-your-own-networking-implementation" aria-hidden="true">#</a> How to use your own networking implementation</h3><blockquote><p>\u{1F3D7}\uFE0F Under construction.</p></blockquote><h3 id="how-to-change-from-the-default-ice-stun-servers-used-for-voip" tabindex="-1"><a class="header-anchor" href="#how-to-change-from-the-default-ice-stun-servers-used-for-voip" aria-hidden="true">#</a> How to change from the default ICE/STUN servers used for VoIP</h3><blockquote><p>\u{1F3D7}\uFE0F Under construction.</p></blockquote>',11);function w(v,_){const a=i("ExternalLinkIcon");return r(),c("div",null,[d,e("p",null,[n("Access to core networking functionality can be obtained by using "),p,n(" from a component. "),e("a",u,[n("The built-in backend server"),o(a)]),n(" requires users to be connected to a room.")]),e("p",null,[n("Networking is currently based on "),e("a",h,[n("websockets"),o(a)]),n(" and sending either json strings (for infrequent updates) or "),e("a",k,[n("flatbuffers"),o(a)]),n(" (for frequent updates).")]),b,e("ul",null,[e("li",null,[e("a",g,[n("Using the schema compiler"),o(a)])]),e("li",null,[e("a",f,[n("Generating a schema"),o(a)])]),e("li",null,[e("a",m,[n("Flatbuffer in Typescript"),o(a)])])]),y])}const q=s(l,[["render",w],["__file","networking.html.vue"]]);export{q as default};
