import{_ as l,r as o,o as d,c,a as e,d as t,b as n,w as p,f as s}from"./app.8b6d0242.js";const u={},h=s('<h2 id="supported-devices" tabindex="-1"><a class="header-anchor" href="#supported-devices" aria-hidden="true">#</a> Supported Devices</h2><p>Theoretically all WebXR-capable devices and browsers should be supported. That being said, we&#39;ve tested the following configurations:</p><table><thead><tr><th>Tested VR Device</th><th>Browser</th><th>Notes</th></tr></thead><tbody><tr><td>Meta Quest 1</td><td>\u2714\uFE0F Meta Browser</td><td>hand tracking, support for sessiongranted<sup>1</sup></td></tr><tr><td>Meta Quest 2</td><td>\u2714\uFE0F Meta Browser</td><td>hand tracking, support for sessiongranted<sup>1</sup>, passthrough (black and white)</td></tr><tr><td>Meta Quest Pro</td><td>\u2714\uFE0F Meta Browser</td><td>hand tracking, support for sessiongranted<sup>1</sup>, passthrough</td></tr><tr><td>Pico Neo 3</td><td>\u2714\uFE0F Pico Browser</td><td>no hand tracking, inverted controller thumbsticks</td></tr><tr><td>Pico Neo 4</td><td>\u2714\uFE0F Pico Browser</td><td>passthrough, hand tracking<sup>2</sup></td></tr><tr><td>Oculus Rift 1/2</td><td>\u2714\uFE0F Chrome</td><td></td></tr><tr><td>Hololens 2</td><td>\u2714\uFE0F Edge</td><td>hand tracking, support for AR and VR (in VR mode, background is rendered as well)</td></tr><tr><td>Meta Quest 1/2 via Oculus Link</td><td>\u2714\uFE0F Chrome</td><td>no hand tracking, known issues with repeated refresh of a WebXR session in Chrome</td></tr><tr><td>Looking Glass Portrait</td><td>\u2714\uFE0F Chrome</td><td>requires shim, see samples</td></tr></tbody></table><table><thead><tr><th>Tested AR Device</th><th>Browser</th><th>Notes</th></tr></thead><tbody><tr><td>Android 10+</td><td>\u2714\uFE0F Chrome</td><td></td></tr><tr><td>Android 10+</td><td>\u2714\uFE0F Firefox</td><td></td></tr><tr><td>iOS 15+</td><td>\u2714\uFE0F WebXR Viewer</td><td>does not fully implement standards, but supported</td></tr><tr><td>iOS 15+</td><td>\u274C Safari</td><td>can fall back to interactive USDZ files or <a href="#limitations-for-webxr-on-ios">other approaches</a></td></tr><tr><td>Hololens 2</td><td>\u2714\uFE0F Edge</td><td></td></tr><tr><td>Hololens 1</td><td>\u274C</td><td>no WebXR support</td></tr></tbody></table><table><thead><tr><th>Not Tested but Should Work\u2122\uFE0F</th><th>Browser</th><th>Notes</th></tr></thead><tbody><tr><td>Magic Leap 1</td><td></td><td>please let us know if you tried!</td></tr><tr><td>Magic Leap 2</td><td></td><td>please let us know if you tried!</td></tr></tbody></table><p><sup>1</sup>: Requires enabling a browser flag: <code>chrome://flags/#webxr-navigation-permission</code><br><sup>2</sup>: Requires enabling a toggle in the Developer settings</p><h2 id="adding-vr-and-ar-capabilities-to-a-scene" tabindex="-1"><a class="header-anchor" href="#adding-vr-and-ar-capabilities-to-a-scene" aria-hidden="true">#</a> Adding VR and AR capabilities to a scene</h2><p>AR, VR and networking capabilites in Needle Engine are designed to be modular. You can choose to not support any of them, or add only specific features.</p><h3 id="basic-capabilities" tabindex="-1"><a class="header-anchor" href="#basic-capabilities" aria-hidden="true">#</a> Basic capabilities</h3>',9),b=s('<li><p><strong>Enable AR and VR</strong><br> Add a <code>WebXR</code> component.<br><em>Optional:</em> you can set a custom avatar by referencing an <a href="#avatars">Avatar Prefab</a>.<br> By default a very basic <code>DefaultAvatar</code> is assigned.</p></li><li><p><strong>Enable Teleportation</strong><br> Add a <code>TeleportTarget</code> component to object hierarchies that can be teleported on.<br> To exclude specific objects, set their layer to <code>IgnoreRaycasting</code>.</p></li>',2),g=e("strong",null,"Enable going into Miniature Mode",-1),m=e("br",null,null,-1),f=e("br",null,null,-1),k=s('<h3 id="multiplayer" tabindex="-1"><a class="header-anchor" href="#multiplayer" aria-hidden="true">#</a> Multiplayer</h3><ul><li><p><strong>Enable Networking</strong><br> Add a <code>SyncedRoom</code> component.</p></li><li><p><strong>Enable Desktop Viewer Sync</strong><br> Add a <code>SyncedCamera</code> component.</p></li><li><p><strong>Enable XR Avatar Sync</strong><br> Add a <code>WebXRSync</code> component.</p></li><li><p><strong>Enable Voice Chat</strong><br> Add a <code>VoIP</code> component.</p></li></ul><blockquote><p><strong>Note</strong>: these components can be anywhere inside your <code>GltfObject</code> hierarchy. They can also all be on the same GameObject.</p></blockquote>',3),v={href:"https://castle.needle.tools/",target:"_blank",rel:"noopener noreferrer"},_=e("br",null,null,-1),y=s('<h3 id="special-ar-components" tabindex="-1"><a class="header-anchor" href="#special-ar-components" aria-hidden="true">#</a> Special AR Components</h3><ul><li><strong>Define the AR Session Root and Scale</strong><br> Add a <code>WebARSessionRoot</code> component to your root object.<br> Here you can define the user scale to shrink (&lt; 1) or enlarge (&gt; 1) the user in relation to the scene when entering AR.</li></ul><h3 id="controlling-object-display-for-xr" tabindex="-1"><a class="header-anchor" href="#controlling-object-display-for-xr" aria-hidden="true">#</a> Controlling object display for XR</h3><ul><li><p><strong>Define whether an object is visible in Browser, AR, VR, First Person, Third Person</strong><br> Add a <code>XR Flag</code> component to the object you want to control. Change options on the dropdown as needed.</p><p>Common usecases are</p><ul><li>hiding floors when entering AR</li><li>hiding Avatar parts in First or Third Person views (e.g. first-person head shouldn&#39;t be visible).</li></ul></li></ul><h3 id="travelling-between-vr-worlds" tabindex="-1"><a class="header-anchor" href="#travelling-between-vr-worlds" aria-hidden="true">#</a> Travelling between VR worlds</h3>',5),w={href:"https://github.com/immersive-web/navigation",target:"_blank",rel:"noopener noreferrer"},R=e("code",null,"sessiongranted",-1),A=e("p",null,[t("Currently, this is only supported on Oculus Quest 1 and 2 in the Oculus Browser. On other platforms, users will be kicked out of their current immersive session and have to enter VR again on the new page."),e("br"),t(" Requires enabling a browser flag: "),e("code",null,"chrome://flags/#webxr-navigation-permission")],-1),x=e("strong",null,"Click on objects to open links",-1),T=e("br",null,null,-1),j={href:"https://github.com/needle-tools/needle-engine-samples",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/needle-tools/needle-engine-samples/blob/main/package/Runtime/Needle%20Engine%20Samples~/ClickToOpenWebsite.ts",target:"_blank",rel:"noopener noreferrer"},O=e("code",null,"ClickToOpenWebsite",-1),C=s(`<h2 id="avatars" tabindex="-1"><a class="header-anchor" href="#avatars" aria-hidden="true">#</a> Avatars</h2><p>While we don&#39;t currently provide an out-of-the-box integration external avatar systems, you can create application-specific avatars or custom systems.</p><ul><li><strong>Create a custom Avatar</strong><ul><li>Create an empty GameObject as avatar root</li><li>Add an object named <code>Head</code> and add a <code>XRFlag</code> that&#39;s set to Third Person</li><li>Add objects named <code>HandLeft</code> and <code>HandRight</code></li><li>Add your graphics below these objects.</li></ul></li></ul><h3 id="experimental-avatar-components" tabindex="-1"><a class="header-anchor" href="#experimental-avatar-components" aria-hidden="true">#</a> Experimental Avatar Components</h3><p>There&#39;s a number of experimental components to build more expressive Avatars. At this point we recommended duplicating them to make your own variants, since they might be changed or removed at a later point.</p><p><img src="https://user-images.githubusercontent.com/2693840/185243523-57c4b2a9-0ec7-4f88-b53b-585e879d504d.gif" alt="20220817-230858-87dG-Unity_PLjQ"><br><em>Example Avatar Rig with basic neck model and limb constraints</em></p><ul><li><p><strong>Random Player Colors</strong><br> As an example for avatar customization, you can add a <code>PlayerColor</code> component to your renderers.<br> This randomized color is synchronized between players.</p></li><li><p><strong>Eye Rotation</strong><br><code>AvatarEyeLook_Rotation</code> rotates GameObjects (eyes) to follow other avatars and a random target. This component is synchronized between players.</p></li><li><p><strong>Eye Blinking</strong><br><code>AvatarBlink_Simple</code> randomly hides GameObjects (eyes) every few seconds, emulating a blink.</p><p><img src="https://user-images.githubusercontent.com/2693840/185233753-e6de49f0-31c3-4851-9919-551309303ebd.png" alt="image"><br><em>Example Avatar Prefab hierarchy</em></p></li><li><p><strong>Offset Constraint</strong><br><code>OffsetConstraint</code> allows to shift an object in relation to another one in Avatar space. This allows, for example, to have a Body follow the Head but keep rotation levelled. It also allows to construct simple neck models.</p></li><li><p><strong>Limb Constraint</strong><br><code>BasicIKConstraint</code> is a very minimalistic constraint that takes two transforms and a hint. This is useful to construct simple arm or leg chains. As rotation is currently not properly implemented, arms and legs may need to be rotationally symmetric to &quot;look right&quot;. It&#39;s called &quot;Basic&quot; for a reason!</p></li></ul><h2 id="html-content-overlays-in-ar" tabindex="-1"><a class="header-anchor" href="#html-content-overlays-in-ar" aria-hidden="true">#</a> HTML Content Overlays in AR</h2><p>If you want to display different html content whether the client is using a regular browser or using AR or VR, you can just use a set of html classes.<br> This is controlled via HTML element classes. For example, to make content appear on desktop and in AR add a <code>&lt;div class=&quot;desktop ar&quot;&gt; ... &lt;/div&gt;</code> inside the <code>&lt;needle-engine&gt;</code> tag:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>needle-engine</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>desktop ar<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">pointer-events</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>positioning-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>your content for AR and desktop goes here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>only-in-ar<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>This will only be visible in AR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>needle-engine</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Content Overlays are implemented using the optional <code>dom-overlay</code> feature which is usually supported on screen-based AR devices (phones, tablets).</p>`,11),q=e("code",null,".ar-session-active",-1),E={href:"https://www.w3.org/TR/webxr-dom-overlays-1/#css-pseudo-class",target:"_blank",rel:"noopener noreferrer"},W=e("code",null,":xr-overlay",-1),B=s(`<div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">.only-in-ar</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.ar-session-active .only-in-ar</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span>initial<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),V={href:"https://www.w3.org/TR/webxr-dom-overlays-1/#ua-style-sheet-defaults",target:"_blank",rel:"noopener noreferrer"},X=e("em",null,"inside",-1),D=e("code",null,'class="ar"',-1),M=e("h2",{id:"image-tracking",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#image-tracking","aria-hidden":"true"},"#"),t(" Image Tracking")],-1),P={href:"https://github.com/immersive-web/marker-tracking/blob/main/explainer.md",target:"_blank",rel:"noopener noreferrer"},N=e("p",null,[t("Without that spec, one can still request camera image access and run custom algorithms to determine device pose."),e("br"),t(" While we currently don't provide built-in components for this, here's a few references to libraries and frameworks that we want to try in the future:")],-1),I={href:"https://github.com/AR-js-org/AR.js",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/FireDragonGameStudio/NeedleAndARjs",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github.com/hiukim/mind-ar-js",target:"_blank",rel:"noopener noreferrer"},F=e("h2",{id:"limitations-for-webxr-on-ios",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#limitations-for-webxr-on-ios","aria-hidden":"true"},"#"),t(" Limitations for WebXR on iOS")],-1),H=e("p",null,"Due to Apple currently not supporting WebXR on iOS devices, Augmented Reality experiences on iOS are limited.",-1),z=e("p",null,[t("A number of options and workarounds exist to still give iOS users "),e("em",null,"some"),t(" AR:")],-1),U=e("strong",null,"Guiding users towards WebXR-compatible browsers on iOS.",-1),Q={href:"https://apps.apple.com/de/app/webxr-viewer/id1295998056",target:"_blank",rel:"noopener noreferrer"},Z=e("strong",null,"Exporting content on-the-fly as USDZ files.",-1),K=e("br",null,null,-1),Y={href:"https://castle.needle.tools",target:"_blank",rel:"noopener noreferrer"},J={href:"https://threejs.org/examples/misc_exporter_usdz.html",target:"_blank",rel:"noopener noreferrer"},$={href:"https://accurate-tree-observation.glitch.me/",target:"_blank",rel:"noopener noreferrer"},ee=e("br",null,null,-1),te={start:"2"},ne=e("strong",null,"Using camera access and custom algorithms on iOS devices.",-1),ae=e("br",null,null,-1),se=e("br",null,null,-1),oe={href:"https://github.com/AR-js-org/AR.js",target:"_blank",rel:"noopener noreferrer"},re={href:"https://github.com/FireDragonGameStudio/NeedleAndARjs",target:"_blank",rel:"noopener noreferrer"},ie={href:"https://github.com/hiukim/mind-ar-js",target:"_blank",rel:"noopener noreferrer"},le={href:"https://www.8thwall.com/",target:"_blank",rel:"noopener noreferrer"},de=e("h2",{id:"references",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#references","aria-hidden":"true"},"#"),t(" References")],-1),ce={href:"https://www.w3.org/TR/webxr/",target:"_blank",rel:"noopener noreferrer"},pe=e("br",null,null,-1),ue={href:"https://caniuse.com/webxr",target:"_blank",rel:"noopener noreferrer"};function he(be,ge){const r=o("kb"),a=o("ExternalLinkIcon"),i=o("sample");return d(),c("div",null,[h,e("ul",null,[b,e("li",null,[e("p",null,[g,m,t(" Pointing onto a surface and pressing "),n(r,null,{default:p(()=>[t("A")]),_:1}),t(" on a controller switches between 1:10 scale (miniature mode) and 1:1 scale."),f,t(" We're planning to add a component to have more control over this functionality.")])])]),k,e("blockquote",null,[e("p",null,[e("strong",null,[e("a",v,[t("Castle Builder"),n(a)])]),t(" uses all of the above for a cross-platform multiplayer sandbox experience."),_,t(" \u2014 #madebyneedle \u{1F49A}")])]),y,e("p",null,[t("Needle Engine supports the "),e("a",w,[R,n(a)]),t(" state. This allows users to seamlessly traverse between WebXR applications without leaving an immersive session \u2013 they stay in VR or AR.")]),A,e("ul",null,[e("li",null,[x,T,t(" The "),e("a",j,[t("samples repository"),n(a)]),t(" contains a small script "),e("a",S,[O,n(a)]),t(" that makes it very easy to build connected worlds.")])]),C,e("p",null,[t("Use the "),q,t(" class to show/hide specific content while in AR. The "),e("a",E,[W,t(" pseudo class"),n(a)]),t(" shouldn't be used at this point because using it breaks Mozilla's WebXR Viewer.")]),B,e("p",null,[t("It's worth noting that the overlay element "),e("a",V,[t("will be always displayed fullscreen while in XR"),n(a)]),t(", independent of styling that has been applied. If you want to align items differently, you should make a container "),X,t(" the "),D,t(" element.")]),n(i,{src:"https://engine.needle.tools/samples/ar-overlay/"}),M,e("p",null,[t(`WebXR doesn't yet support Image Tracking, it's still in a "draft" phase: `),e("a",P,[t("Marker Tracking Explainer"),n(a)])]),N,e("ul",null,[e("li",null,[e("a",I,[t("AR.js"),n(a)]),t(" (open source) "),e("ul",null,[e("li",null,[e("a",L,[t("Experimental AR.js integration"),n(a)]),t(" by FireDragonGameStudio")])])]),e("li",null,[e("a",G,[t("Mind AR"),n(a)]),t(" (open source)")])]),F,H,z,e("ol",null,[e("li",null,[e("p",null,[U,t(" Depending on your target audience, you can guide users on iOS towards for example Mozilla's "),e("a",Q,[t("WebXR Viewer"),n(a)]),t(" to experience AR on iOS.")])]),e("li",null,[e("p",null,[Z,K,t(" These files can be displayed on iOS devices in AR. They lack interactivity (besides a small set of built-in components) but can be sufficient for product configurators and similar relatively static usecases. An example is "),e("a",Y,[t("Castle Builder"),n(a)]),t(" where creations (not the live session) can be viewed in AR.")]),e("ul",null,[e("li",null,[t("The "),e("a",J,[t("three.js USDZ converter"),n(a)]),t(" can be used like any other three.js example to create and view USDZ files at runtime.")])])])]),e("blockquote",null,[e("p",null,[e("strong",null,[e("a",$,[t("Encryption in Space"),n(a)])]),t(" uses this approach. Players can collaboratively place text into the scene on their screens and then view the results in AR on iOS. On Android, they can also interact right in WebXR."),ee,t(" \u2014 #madewithneedle by Katja Rempel \u{1F49A}")])]),e("ol",te,[e("li",null,[ne,ae,t(" One can request camera image access and run custom algorithms to determine device pose."),se,t(" While we currently don't provide built-in components for this, here's a few references to libraries and frameworks that we want to try in the future: "),e("ul",null,[e("li",null,[e("a",oe,[t("AR.js"),n(a)]),t(" (open source) "),e("ul",null,[e("li",null,[e("a",re,[t("Experimental AR.js integration"),n(a)]),t(" by FireDragonGameStudio")])])]),e("li",null,[e("a",ie,[t("Mind AR"),n(a)]),t(" (open source)")]),e("li",null,[e("a",le,[t("8th Wall"),n(a)]),t(" (commercial)")])])])]),de,e("p",null,[e("a",ce,[t("WebXR Device API"),n(a)]),pe,e("a",ue,[t("caniuse: WebXR"),n(a)])])])}const fe=l(u,[["render",he],["__file","xr.html.vue"]]);export{fe as default};
