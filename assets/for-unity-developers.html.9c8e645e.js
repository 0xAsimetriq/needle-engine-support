import{_ as o,r as p,o as c,c as i,a as n,d as s,b as e,f as t}from"./app.8b6d0242.js";const l={},r=n("div",{class:"custom-container warning"},[n("p",{class:"custom-container-title"},"WARNING"),n("p",null,"This page is under construction.")],-1),u=n("p",null,"Below you can find some common code examples that help you getting familiar when coming from Unity and starting to dive into web development with Needle Engine.",-1),d={href:"https://docs.needle.tools/scripting",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.typescriptlang.org/docs/",target:"_blank",rel:"noopener noreferrer"},v=t('<h3 id="components" tabindex="-1"><a class="header-anchor" href="#components" aria-hidden="true">#</a> Components</h3><p>For getting component you can use the familiar methods similar to Unity:<br> For example</p><ul><li><code>this.gameObject.getComponent(Animator)</code> - returns the animator component on this gameobject (and null if none is found)</li><li><code>this.gameObject.getComponentInChildren(Animator)</code> - returns the first animator component in the child hierarchy</li><li><code>this.gameObject.getComponentsInParents(Animator)</code> - returns all animator components in the parent hierarchy (including the current gameObject)</li></ul><p>These methods are also available on the static GameObject type.<br> For example: <code>GameObject.getComponent(this.gameObject, Animator)</code>.<br> Search in the whole scene by calling <code>GameObject.findObjectOfType(Animator)</code></p><h3 id="transform" tabindex="-1"><a class="header-anchor" href="#transform" aria-hidden="true">#</a> Transform</h3>',5),m={href:"https://threejs.org/docs/#api/en/core/Object3D",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"this.gameObject.position",-1),b={href:"https://threejs.org/docs/?q=obj#api/en/core/Object3D.position",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"this.gameObject.rotation",-1),y={href:"https://threejs.org/docs/?q=obj#api/en/core/Object3D.rotation",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"this.gameObject.quaternion",-1),_={href:"https://threejs.org/docs/?q=obj#api/en/core/Object3D.quaternion",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"this.gameObject.scale",-1),x={href:"https://threejs.org/docs/?q=obj#api/en/core/Object3D.scale",target:"_blank",rel:"noopener noreferrer"},q=n("h3",{id:"time",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#time","aria-hidden":"true"},"#"),s(" Time")],-1),j=n("p",null,[s("Use "),n("code",null,"this.context.time"),s(" to get access to time data. For example "),n("code",null,"this.context.time.deltaTime")],-1),E=n("h3",{id:"raycasting",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#raycasting","aria-hidden":"true"},"#"),s(" Raycasting")],-1),O=n("code",null,"this.context.physics.raycast()",-1),C=n("br",null,null,-1),I=n("code",null,"this.context.physics.raycastFromRay(your_ray)",-1),D={href:"https://threejs.org/docs/#api/en/math/Ray",target:"_blank",rel:"noopener noreferrer"},P=t(`<h3 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> Input</h3><p>Use <code>this.context.input</code> to poll input state</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyScript</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span>
<span class="token punctuation">{</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">getPointerDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// CLICKED</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also subscribe to events in the <code>InputEvents</code> enum like so:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> InputEvents <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine/engine/engine_input&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyScript</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span>
<span class="token punctuation">{</span>
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>InputEvents<span class="token punctuation">.</span>PointerDown<span class="token punctuation">,</span> evt <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also subscribe to browser events. For example to receive mouse clicks:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyScript</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span>
<span class="token punctuation">{</span>
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;MOUSE CLICK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="subscribing-to-events" tabindex="-1"><a class="header-anchor" href="#subscribing-to-events" aria-hidden="true">#</a> Subscribing to Events</h3>`,8),U=n("code",null,"this.dispatchEvent()",-1),V={href:"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent",target:"_blank",rel:"noopener noreferrer"},B=n("br",null,null,-1),S=n("code",null,'this.otherComponent.addEventListener("someEvent", ...)',-1),T=n("p",null,[s("Any "),n("code",null,"EventList"),s(" / "),n("code",null,"UnityEvent"),s(" will automatically also be dispatched as a event. For example if your field is "),n("code",null,"myEvent : EventList"),s(" it will be dispatched as "),n("code",null,"my-event"),s(".")],-1),A={href:"https://threejs.org/docs/#examples/en/controls/OrbitControls",target:"_blank",rel:"noopener noreferrer"},L=t(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> GameObject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> OrbitControls <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine/engine-components/OrbitControls&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OrbitEventExample</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> orbit <span class="token operator">=</span> GameObject<span class="token punctuation">.</span><span class="token function">findObjectOfType</span><span class="token punctuation">(</span>OrbitControls<span class="token punctuation">)</span><span class="token punctuation">;</span>

        orbit<span class="token operator">?.</span>controls<span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span> args <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onStarted</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        orbit<span class="token operator">?.</span>controls<span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;change&quot;</span><span class="token punctuation">,</span> args <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;CHANGE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        orbit<span class="token operator">?.</span>controls<span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> args <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onEnded</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token function">onStarted</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;STARTED&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">onEnded</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;ENDED&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inputsystem-callbacks" tabindex="-1"><a class="header-anchor" href="#inputsystem-callbacks" aria-hidden="true">#</a> InputSystem callbacks</h3>`,2),G={href:"https://docs.unity3d.com/Packages/com.unity.ugui@1.0/api/UnityEngine.EventSystems.IPointerClickHandler.html",target:"_blank",rel:"noopener noreferrer"},N=t(`<blockquote><p><strong>Note</strong>: Make sure your object has a <code>ObjectRaycaster</code> or <code>GraphicRaycaster</code> component in the parent hierarchy</p></blockquote><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> IPointerEventHandler<span class="token punctuation">,</span> PointerEventData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine/engine-components/ui/PointerEvents&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveClickEvent</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token keyword">implements</span> <span class="token class-name">IPointerEventHandler</span> <span class="token punctuation">{</span>
    <span class="token function">onPointerClick</span><span class="token punctuation">(</span>args<span class="token operator">:</span> PointerEventData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Click&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exporting-videoclips" tabindex="-1"><a class="header-anchor" href="#exporting-videoclips" aria-hidden="true">#</a> Exporting VideoClips</h3><p>Generate a C# component that takes a list of VideoClips. VideoClips are on export copied to the output directory and your typescript component receives a list of relative paths to the videos (e.g. <code>[&quot;assets/myVideo1.mp4&quot;, &quot;assets/myOtherVideo.mp4&quot;]</code>)</p><p>You can also use the <code>VideoPlayer</code> component if you just want to playback some video.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> serializable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">VideoClip</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyVideos</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
    videos<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>VideoClip<span class="token operator">&gt;</span><span class="token punctuation">;</span>

    video<span class="token operator">?</span> <span class="token operator">:</span> VideoClip<span class="token punctuation">;</span>

    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function R(F,M){const a=p("ExternalLinkIcon");return c(),i("div",null,[r,u,n("p",null,[s("General information about "),n("a",d,[s("scripting in Needle Engine can be found here"),e(a)]),s(".")]),n("p",null,[s("Please also refer to the "),n("a",k,[s("Typescript reference"),e(a)]),s(" for syntax and general language questions!")]),v,n("p",null,[s("Transform data can be accessed on the "),n("a",m,[s("threejs Object3D"),e(a)]),s(" (we also call it GameObject) directly. Unlike to Unity there is no extra transform component.")]),n("ul",null,[n("li",null,[h,s(" - local space "),n("a",b,[s("position"),e(a)])]),n("li",null,[g,s(" - local space "),n("a",y,[s("rotation in euler angles"),e(a)])]),n("li",null,[f,s(" - local space rotation as "),n("a",_,[s("quaternion"),e(a)])]),n("li",null,[w,s(" - local space "),n("a",x,[s("scale"),e(a)])])]),q,j,E,n("p",null,[s("Use "),O,s(" to perform a raycast from the mouse position (by default)."),C,s(" Use "),I,s(" to perform a raycast using a "),n("a",D,[s("threejs ray"),e(a)])]),P,n("p",null,[s("Any component can dispatch events by calling "),U,s(", see "),n("a",V,[s("javascript documentation"),e(a)]),s("."),B,s(" Vice-versa you can subscribe to any component "),S]),T,n("p",null,[n("em",null,[s("The following example shows how to subscribe to the "),n("a",A,[s("threejs OrbitControls"),e(a)]),s(" events")])]),L,n("p",null,[s("Similar to Unity (see "),n("a",G,[s("IPointerClickHandler in Unity"),e(a)]),s(") you can also register to receive input events")]),N])}const z=o(l,[["render",R],["__file","for-unity-developers.html.vue"]]);export{z as default};
